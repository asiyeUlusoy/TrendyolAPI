<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="2" passed="1">
  <reporter-output>
    <line>
      <![CDATA[Test Started with runID= 1591824]]>
    </line>
    <line>
      <![CDATA[Set Up completed]]>
    </line>
    <line>
      <![CDATA[Test Started= emptyStore
]]>
    </line>
    <line>
      <![CDATA[Service Response:]]>
    </line>
    <line>
      <![CDATA[[]]]>
    </line>
    <line>
      <![CDATA[Test Completed= emptyStore
]]>
    </line>
    <line>
      <![CDATA[Test Started= requiredFieldTitle
]]>
    </line>
    <line>
      <![CDATA[Service Response:]]>
    </line>
    <line>
      <![CDATA[{"id":0,"author":null,"title":null,"error":"title and author are required fields"}]]>
    </line>
    <line>
      <![CDATA[Test Completed= requiredFieldTitle
]]>
    </line>
  </reporter-output>
  <suite name="BookStore Api Testing" duration-ms="2402" started-at="2019-03-10T11:05:18Z" finished-at="2019-03-10T11:05:20Z">
    <groups>
    </groups>
    <test name="BookStore Api Testing" duration-ms="2402" started-at="2019-03-10T11:05:18Z" finished-at="2019-03-10T11:05:20Z">
      <class name="suites.bookstore.ApiTest">
        <test-method status="PASS" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="beforeClass" is-config="true" duration-ms="442" started-at="2019-03-10T11:05:18Z" finished-at="2019-03-10T11:05:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@58670130]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Started with runID= 1591824]]>
            </line>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="setUp" is-config="true" duration-ms="1304" started-at="2019-03-10T11:05:18Z" finished-at="2019-03-10T11:05:20Z">
          <reporter-output>
            <line>
              <![CDATA[Set Up completed]]>
            </line>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void suites.bookstore.ApiTest.emptyStore()]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Started= emptyStore
]]>
            </line>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="emptyStore()[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="emptyStore" duration-ms="202" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <reporter-output>
            <line>
              <![CDATA[Service Response:]]>
            </line>
            <line>
              <![CDATA[[]]]>
            </line>
          </reporter-output>
        </test-method> <!-- emptyStore -->
        <test-method status="PASS" signature="afterTest(java.lang.reflect.Method)[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="afterTest" is-config="true" duration-ms="1" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void suites.bookstore.ApiTest.emptyStore()]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Completed= emptyStore
]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="beforeTest" is-config="true" duration-ms="1" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void suites.bookstore.ApiTest.requiredFieldTitle()]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Started= requiredFieldTitle
]]>
            </line>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="FAIL" signature="requiredFieldTitle()[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="requiredFieldTitle" duration-ms="423" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Error message is not correct expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Error message is not correct expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at suites.bookstore.ApiTest.requiredFieldTitle(ApiTest.java:66)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[Service Response:]]>
            </line>
            <line>
              <![CDATA[{"id":0,"author":null,"title":null,"error":"title and author are required fields"}]]>
            </line>
          </reporter-output>
        </test-method> <!-- requiredFieldTitle -->
        <test-method status="PASS" signature="afterTest(java.lang.reflect.Method)[pri:0, instance:suites.bookstore.ApiTest@6a5fc7f7]" name="afterTest" is-config="true" duration-ms="4" started-at="2019-03-10T11:05:20Z" finished-at="2019-03-10T11:05:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void suites.bookstore.ApiTest.requiredFieldTitle()]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Completed= requiredFieldTitle
]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- suites.bookstore.ApiTest -->
    </test> <!-- BookStore Api Testing -->
  </suite> <!-- BookStore Api Testing -->
</testng-results>
